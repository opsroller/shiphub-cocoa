<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/BITMetricsManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/BITMetricsManager</TokenIdentifier>
			<Abstract type="html">The metrics module.</Abstract>
			<DeclaredIn>BITMetricsManager.h</DeclaredIn>
            
			
			<NodeRef refid="20"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/initWithChannel:telemetryContext:persistence:userDefaults:</TokenIdentifier>
			<Abstract type="html">*  Create a new BITMetricsManager instance by passing the channel, the telemetry context, and persistence instance to use
for processing metrics. This method can be used for dependency injection.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithChannel:(BITChannel *)channel telemetryContext:(BITTelemetryContext *)telemetryContext persistence:(BITPersistence *)persistence userDefaults:(NSUserDefaults *)userDefaults</Declaration>
			
			
			<Anchor>//api/name/initWithChannel:telemetryContext:persistence:userDefaults:</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/setUserDefaults:</TokenIdentifier>
			<Abstract type="html">The user defaults object used to store meta data.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSUserDefaults *userDefaults</Declaration>
			
			
			<Anchor>//api/name/userDefaults</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/userDefaults</TokenIdentifier>
			<Abstract type="html">The user defaults object used to store meta data.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSUserDefaults *userDefaults</Declaration>
			
			
			<Anchor>//api/name/userDefaults</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BITMetricsManager/userDefaults</TokenIdentifier>
			<Abstract type="html">The user defaults object used to store meta data.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSUserDefaults *userDefaults</Declaration>
			
			
			<Anchor>//api/name/userDefaults</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/setPersistence:</TokenIdentifier>
			<Abstract type="html">A channel for collecting new events before storing and sending them.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) BITPersistence *persistence</Declaration>
			
			
			<Anchor>//api/name/persistence</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/persistence</TokenIdentifier>
			<Abstract type="html">A channel for collecting new events before storing and sending them.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) BITPersistence *persistence</Declaration>
			
			
			<Anchor>//api/name/persistence</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BITMetricsManager/persistence</TokenIdentifier>
			<Abstract type="html">A channel for collecting new events before storing and sending them.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) BITPersistence *persistence</Declaration>
			
			
			<Anchor>//api/name/persistence</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/setChannel:</TokenIdentifier>
			<Abstract type="html">A channel for collecting new events before storing and sending them.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) BITChannel *channel</Declaration>
			
			
			<Anchor>//api/name/channel</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/channel</TokenIdentifier>
			<Abstract type="html">A channel for collecting new events before storing and sending them.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) BITChannel *channel</Declaration>
			
			
			<Anchor>//api/name/channel</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BITMetricsManager/channel</TokenIdentifier>
			<Abstract type="html">A channel for collecting new events before storing and sending them.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) BITChannel *channel</Declaration>
			
			
			<Anchor>//api/name/channel</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/setTelemetryContext:</TokenIdentifier>
			<Abstract type="html">A telemetry context which is used to add meta info to events, before they&apos;re sent out.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) BITTelemetryContext *telemetryContext</Declaration>
			
			
			<Anchor>//api/name/telemetryContext</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/telemetryContext</TokenIdentifier>
			<Abstract type="html">A telemetry context which is used to add meta info to events, before they&apos;re sent out.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) BITTelemetryContext *telemetryContext</Declaration>
			
			
			<Anchor>//api/name/telemetryContext</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BITMetricsManager/telemetryContext</TokenIdentifier>
			<Abstract type="html">A telemetry context which is used to add meta info to events, before they&apos;re sent out.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) BITTelemetryContext *telemetryContext</Declaration>
			
			
			<Anchor>//api/name/telemetryContext</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/setMetricsEventQueue:</TokenIdentifier>
			<Abstract type="html">A concurrent queue which creates and processes telemetry items.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) dispatch_queue_t metricsEventQueue</Declaration>
			
			
			<Anchor>//api/name/metricsEventQueue</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/metricsEventQueue</TokenIdentifier>
			<Abstract type="html">A concurrent queue which creates and processes telemetry items.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) dispatch_queue_t metricsEventQueue</Declaration>
			
			
			<Anchor>//api/name/metricsEventQueue</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BITMetricsManager/metricsEventQueue</TokenIdentifier>
			<Abstract type="html">A concurrent queue which creates and processes telemetry items.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) dispatch_queue_t metricsEventQueue</Declaration>
			
			
			<Anchor>//api/name/metricsEventQueue</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/setSender:</TokenIdentifier>
			<Abstract type="html">Sender instance to send out telemetry data.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) BITSender *sender</Declaration>
			
			
			<Anchor>//api/name/sender</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/sender</TokenIdentifier>
			<Abstract type="html">Sender instance to send out telemetry data.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) BITSender *sender</Declaration>
			
			
			<Anchor>//api/name/sender</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BITMetricsManager/sender</TokenIdentifier>
			<Abstract type="html">Sender instance to send out telemetry data.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) BITSender *sender</Declaration>
			
			
			<Anchor>//api/name/sender</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/setAppBackgroundTimeBeforeSessionExpires:</TokenIdentifier>
			<Abstract type="html">The Interval an app has to be in the background until the current session gets renewed.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSUInteger appBackgroundTimeBeforeSessionExpires</Declaration>
			
			
			<Anchor>//api/name/appBackgroundTimeBeforeSessionExpires</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/appBackgroundTimeBeforeSessionExpires</TokenIdentifier>
			<Abstract type="html">The Interval an app has to be in the background until the current session gets renewed.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSUInteger appBackgroundTimeBeforeSessionExpires</Declaration>
			
			
			<Anchor>//api/name/appBackgroundTimeBeforeSessionExpires</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BITMetricsManager/appBackgroundTimeBeforeSessionExpires</TokenIdentifier>
			<Abstract type="html">The Interval an app has to be in the background until the current session gets renewed.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSUInteger appBackgroundTimeBeforeSessionExpires</Declaration>
			
			
			<Anchor>//api/name/appBackgroundTimeBeforeSessionExpires</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/registerObservers</TokenIdentifier>
			<Abstract type="html">Registers manager for several notifications, which influence the session state.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>- (void)registerObservers</Declaration>
			
			
			<Anchor>//api/name/registerObservers</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/unregisterObservers</TokenIdentifier>
			<Abstract type="html">Unregisters manager for several notifications, which influence the session state.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>- (void)unregisterObservers</Declaration>
			
			
			<Anchor>//api/name/unregisterObservers</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/updateDidEnterBackgroundTime</TokenIdentifier>
			<Abstract type="html">Stores the current date before app is sent to background.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/BITMetricsManager/appBackgroundTimeBeforeSessionExpires</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/startNewSessionIfNeeded</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)updateDidEnterBackgroundTime</Declaration>
			
			
			<Anchor>//api/name/updateDidEnterBackgroundTime</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/startNewSessionIfNeeded</TokenIdentifier>
			<Abstract type="html">Determines whether the current session needs to be renewed or not.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/BITMetricsManager/appBackgroundTimeBeforeSessionExpires</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/updateDidEnterBackgroundTime</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)startNewSessionIfNeeded</Declaration>
			
			
			<Anchor>//api/name/startNewSessionIfNeeded</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/startNewSessionWithId:</TokenIdentifier>
			<Abstract type="html">Creates a new session, updates the session context and sends it to the channel.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>- (void)startNewSessionWithId:(NSString *)sessionId</Declaration>
			<Parameters>
				<Parameter>
					<Name>sessionId</Name>
					<Abstract type="html">the id for the new session</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/startNewSessionWithId:</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/createNewSessionWithId:</TokenIdentifier>
			<Abstract type="html">Creates a new session and stores it to NSUserDefaults.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>- (BITSession *)createNewSessionWithId:(NSString *)sessionId</Declaration>
			<Parameters>
				<Parameter>
					<Name>sessionId</Name>
					<Abstract type="html">the id for the new session</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">the newly created session</Abstract></ReturnValue>
			<Anchor>//api/name/createNewSessionWithId:</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BITMetricsManager/trackSessionWithState:</TokenIdentifier>
			<Abstract type="html">Creates and enqueues a session event for the given state.</Abstract>
			<DeclaredIn>BITMetricsManagerPrivate.h</DeclaredIn>
			
			<Declaration>- (void)trackSessionWithState:(BITSessionState)state</Declaration>
			<Parameters>
				<Parameter>
					<Name>state</Name>
					<Abstract type="html">value that determines whether the session started or ended</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/trackSessionWithState:</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
        
        
	</File>
</Tokens>